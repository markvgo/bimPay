// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.com.bim.pay.domain;

import au.com.bim.pay.domain.Customer;
import au.com.bim.pay.domain.CustomerDataOnDemand;
import au.com.bim.pay.domain.Employee;
import au.com.bim.pay.domain.EmployeeDataOnDemand;
import au.com.bim.pay.domain.WorkDone;
import au.com.bim.pay.domain.WorkDoneDataOnDemand;
import au.com.bim.pay.domain.WorkType;
import au.com.bim.pay.domain.WorkTypeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect WorkDoneDataOnDemand_Roo_DataOnDemand {
    
    declare @type: WorkDoneDataOnDemand: @Component;
    
    private Random WorkDoneDataOnDemand.rnd = new SecureRandom();
    
    private List<WorkDone> WorkDoneDataOnDemand.data;
    
    @Autowired
    CustomerDataOnDemand WorkDoneDataOnDemand.customerDataOnDemand;
    
    @Autowired
    EmployeeDataOnDemand WorkDoneDataOnDemand.employeeDataOnDemand;
    
    @Autowired
    WorkTypeDataOnDemand WorkDoneDataOnDemand.workTypeDataOnDemand;
    
    public WorkDone WorkDoneDataOnDemand.getNewTransientWorkDone(int index) {
        WorkDone obj = new WorkDone();
        setCustomer(obj, index);
        setDescription(obj, index);
        setEmployee(obj, index);
        setEndDate(obj, index);
        setQuantity(obj, index);
        setRate(obj, index);
        setStartDate(obj, index);
        setWorktype(obj, index);
        return obj;
    }
    
    public void WorkDoneDataOnDemand.setCustomer(WorkDone obj, int index) {
        Customer customer = customerDataOnDemand.getRandomCustomer();
        obj.setCustomer(customer);
    }
    
    public void WorkDoneDataOnDemand.setDescription(WorkDone obj, int index) {
        String description = "description_" + index;
        if (description.length() > 60) {
            description = description.substring(0, 60);
        }
        obj.setDescription(description);
    }
    
    public void WorkDoneDataOnDemand.setEmployee(WorkDone obj, int index) {
        Employee employee = employeeDataOnDemand.getRandomEmployee();
        obj.setEmployee(employee);
    }
    
    public void WorkDoneDataOnDemand.setEndDate(WorkDone obj, int index) {
        Date endDate = new Date(new Date().getTime() - 10000000L);
        obj.setEndDate(endDate);
    }
    
    public void WorkDoneDataOnDemand.setQuantity(WorkDone obj, int index) {
        int quantity = index;
        obj.setQuantity(quantity);
    }
    
    public void WorkDoneDataOnDemand.setRate(WorkDone obj, int index) {
        double rate = new Integer(index).doubleValue();
        obj.setRate(rate);
    }
    
    public void WorkDoneDataOnDemand.setStartDate(WorkDone obj, int index) {
        Date startDate = new Date(new Date().getTime() - 10000000L);
        obj.setStartDate(startDate);
    }
    
    public void WorkDoneDataOnDemand.setWorktype(WorkDone obj, int index) {
        WorkType worktype = workTypeDataOnDemand.getRandomWorkType();
        obj.setWorktype(worktype);
    }
    
    public WorkDone WorkDoneDataOnDemand.getSpecificWorkDone(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        WorkDone obj = data.get(index);
        Long id = obj.getId();
        return WorkDone.findWorkDone(id);
    }
    
    public WorkDone WorkDoneDataOnDemand.getRandomWorkDone() {
        init();
        WorkDone obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return WorkDone.findWorkDone(id);
    }
    
    public boolean WorkDoneDataOnDemand.modifyWorkDone(WorkDone obj) {
        return false;
    }
    
    public void WorkDoneDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = WorkDone.findWorkDoneEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'WorkDone' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<WorkDone>();
        for (int i = 0; i < 10; i++) {
            WorkDone obj = getNewTransientWorkDone(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
